#!/usr/bin/env python
# -*- mode: python -*-
# =============================================================================
#
#  Copyright (c) 2017-2019 Qualcomm Technologies, Inc.
#  All Rights Reserved.
#  Confidential and Proprietary - Qualcomm Technologies, Inc.
#
# =============================================================================

from __future__ import print_function
import traceback
import os
import logging
import argparse
import sys

try:
    from snpe.dlc_utils import modeltools
except ImportError as ie:
    print("Failed to find necessary package:")
    print(str(ie))
    print("Please ensure that $SNPE_ROOT/lib/python is in your PYTHONPATH")
    sys.exit(1)
from snpe.converters.common.utils import snpe_validation_utils, snpe_converter_utils


def getArgs():
    logger = logging.getLogger()
    logger.debug("Parsing the arguments")

    parser = argparse.ArgumentParser(
        description=
        'Script to convert caffe protobuf configuration into a DLC file.')
    parser._action_groups.pop()

    required = parser.add_argument_group('required arguments')
    required.add_argument('-c', '--caffe_txt', type=str, required=True,
                        help='Input caffe proto txt configuration file')

    optional = parser.add_argument_group('optional arguments')


    optional.add_argument('-b','--caffe_bin', type=str,
                        help='Input caffe binary file containing the weight data')
    optional.add_argument('-d', '--dlc', type=str,
                        help='Output DLC file containing the model. If not specified, the data will be written to a file with same name as the caffetxt file with a .dlc extension')
    optional.add_argument('--copyright_file', type=str,
                          help='Path to copyright file. If provided, the content of the file will be added to the dlc.')
    # The "omit_preprocessing" argument populates a variable called "enable_preprocessing" with its opposite value, so that
    # we avoid "double-negatives" all over the code when using it.
    optional.add_argument('--omit_preprocessing', dest="enable_preprocessing", action="store_const", const=False, default=True,
                        help="If specified, converter will disable preprocessing specified by a data layer transform_param or any preprocessing command line options")
    optional.add_argument('--encoding', type=str, choices=['argb32', 'rgba', 'nv21', 'bgr'], default='bgr',
                        help='Image encoding of the source images. Default is bgr if not specified')
    optional.add_argument('--input_size', type=int, nargs=2, metavar=('WIDTH','HEIGHT'),
                        help='Dimensions of the source images for scaling, if different from the network input.')
    optional.add_argument('--model_version', type=str,
                        help='User-defined ASCII string to identify the model, only first 64 bytes will be stored')
    optional.add_argument('--disable_batchnorm_folding', dest="disable_batchnorm_folding", action="store_true",
                        help="If not specified, converter will try to fold batchnorm into previous convolution layer")
    optional.add_argument('--in_layer', type=str, action='append', dest='input_layers',
                          help='Name of the input layer')
    optional.add_argument('--in_type', type=str, choices=['default', 'image', 'opaque'], action='append', dest='input_types',
                          help='Type of data expected by input layer. Type is default if not specified.')
    optional.add_argument('--validation_target', nargs=2, metavar=('RUNTIME_TARGET','PROCESSOR_TARGET'), default = [], action=snpe_validation_utils.ValidateTargetArgs,
                        help="A combination of processor and runtime target against which model will be validated."
                        "Choices for RUNTIME_TARGET: {cpu, gpu, dsp}."
                        "Choices for PROCESSOR_TARGET: {snapdragon_801, snapdragon_820, snapdragon_835}."
                        "If not specified, will validate model against {snapdragon_820, snapdragon_835} across all runtime targets.")
    optional.add_argument('--strict', dest="enable_strict_validation", action="store_true", default=False,
                        help="If specified, will validate in strict mode whereby model will not be produced if it violates constraints of the specified validation target."
                             "If not specified, will validate model in permissive mode against the specified validation target.")
    optional.add_argument("--verbose", dest="verbose", action="store_true",
                        help="Verbose printing", default = False)

    args = parser.parse_args()
    if args.dlc is None:
        filename, fileext = os.path.splitext(os.path.realpath(args.caffe_txt))
        args.dlc = filename + ".dlc"

    return args


if __name__ == '__main__':
    args = getArgs()
    snpe_converter_utils.setUpLogger(args.verbose)

    # Caffe specific:  Verbose also controls caffe's output with verbose option
    if not args.verbose:
        # The levels are
        # 0 - debug
        # 1 - info (still a LOT of outputs)
        # 2 - warnings
        # 3 - errors
        os.environ['GLOG_minloglevel'] = '2'

    # import of Caffe has to come after the setting of GLOG_minloglevel for it to take effect
    from snpe.converters.caffe import snpe_caffe_to_dlc

    converter = snpe_caffe_to_dlc.CaffeSnapDnnConverter()
    try:
        converter_command = snpe_converter_utils.sanitize_args(args, args_to_ignore=['c', 'b', 'caffe_bin', 'caffe_txt', 'd', 'dlc'])
        converter.convert( args.caffe_txt,
                           args.caffe_bin,
                           args.dlc,
                           args.copyright_file,
                           args.encoding,
                           args.input_size,
                           args.input_layers,
                           args.input_types,
                           args.enable_preprocessing,
                           args.model_version,
                           args.disable_batchnorm_folding,
                           converter_command,
                           args.validation_target,
                           args.enable_strict_validation)
    except Exception as e:
        print('Encountered Error:', str(e))
        print()
        print('Stack Trace:')
        traceback.print_exc()
        sys.exit(1)
    sys.exit(0)
